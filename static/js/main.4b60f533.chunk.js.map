{"version":3,"sources":["components/ToolbarComponent/styles.module.css","screens/Home/styles.module.css","screens/Work/styles.module.css","screens/Contact/styles.module.css","components/CustomNavButtonComponent/index.js","components/ToolbarComponent/index.js","screens/Main/index.js","screens/Home/index.js","screens/Work/index.js","screens/Contact/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","container","containerButtons","title","desktop","mobile","subtitle","divider","link","CustomNavButtonComponent","_ref","text","to","react_default","a","createElement","Link","className","defaultProps","ToolbarComponent","styles","components_CustomNavButtonComponent","Component","Main","children","components_ToolbarComponent","Home","Work","href","Contact","App","screens_Main","Switch","Route","exact","path","component","sensitive","render","Redirect","withRouter","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b60f533.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1uD6Q\",\"containerButtons\":\"styles_containerButtons__eMsS1\",\"title\":\"styles_title__Lrh9q\",\"desktop\":\"styles_desktop__1jMNj\",\"mobile\":\"styles_mobile__1wc7i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1lsX9\",\"title\":\"styles_title__224a3\",\"subtitle\":\"styles_subtitle__2-z7M\",\"divider\":\"styles_divider__1xY2Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1D7dZ\",\"title\":\"styles_title__7MVpP\",\"link\":\"styles_link__238Er\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__24jVG\",\"title\":\"styles_title__3F4ne\",\"subtitle\":\"styles_subtitle__2Zh4M\"};","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport './styles.css'\n\nconst CustomNavButtonComponent = ({text, to}) => <Link className=\"nav-link\"  to={to}>{text}</Link>\n\nCustomNavButtonComponent.propTypes = {\n  text: PropTypes.string,\n  to: PropTypes.string\n}\n\nCustomNavButtonComponent.defaultProps = {\n  text: 'undefined',\n  to: '/'\n}\n\nexport default CustomNavButtonComponent\n\n","import React, { Component } from 'react'\nimport CustomNavButtonComponent from '../CustomNavButtonComponent'\nimport styles from './styles.module.css'\n\nclass ToolbarComponent extends Component {\n  render() {\n    return (\n      <div className={styles.container}>\n        <div className={styles.title}>\n          <h2 className={styles.desktop}>Antonio LÃ³pez Garnier</h2>\n          <h2 className={styles.mobile}>Antonio LG</h2>\n        </div>\n        <div className={styles.containerButtons}>\n          <CustomNavButtonComponent text=\"Home\" to=\"/\"></CustomNavButtonComponent>\n          <CustomNavButtonComponent text=\"Work\" to=\"/work\"></CustomNavButtonComponent>\n          <CustomNavButtonComponent text=\"Contact\" to=\"/contact\"></CustomNavButtonComponent>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ToolbarComponent;\n","import React from 'react';\nimport ToolbarComponent from \"../../components/ToolbarComponent\"\n\nconst Main = ({children}) =>\n    <div>\n      <ToolbarComponent/>\n      <div>\n        {children}\n      </div>\n    </div>\n\nexport default Main;\n","import React from 'react';\nimport styles from './styles.module.css'\n\nconst Home = () =>\n    <div className={styles.container}>\n      <h1 className={styles.title}>Software Engineer</h1>\n      <div className={styles.divider}></div>\n      <h5 className={styles.subtitle}>Love building scalable and quality applications. Always learning...</h5>\n    </div>\n\nexport default Home;\n","import React, { Component } from 'react';\nimport styles from './styles.module.css'\nclass Work extends Component {\n  render() {\n    return (\n      <div className={styles.container}>\n        <h1 className={styles.title}>Now working for <br/> <a className={styles.link} href=\"https://www.anorak.life/\">Anorak Technologies</a></h1>\n      </div>\n    );\n  }\n}\n\nexport default Work;\n","import React, { Component } from 'react';\nimport styles from './styles.module.css'\n\nclass Contact extends Component {\n  render() {\n    return (\n      <div className={styles.container}>\n        <h1 className={styles.title}>Contact me by email:</h1>\n        <h2 className={styles.subtitle}>antoniolopezgarnier@gmail.com</h2>\n      </div>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom'\nimport Main from './screens/Main'\nimport Home from './screens/Home'\nimport Work from './screens/Work'\nimport Contact from './screens/Contact'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <Main>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route sensitive path=\"/work\" component={Work} />\n            <Route sensitive path=\"/contact\" component={Contact} />\n            <Route render={() => <Redirect to=\"/\" />} />\n          </Switch>\n        </Main>\n    );\n  }\n}\n\nexport default withRouter(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}